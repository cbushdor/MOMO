<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://www.dil.univ-mrs.fr/~chris/Perl/Hash.htm -->
<HTML><HEAD><TITLE>Cours Perl, Les hash.</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><LINK 
href="Cours Perl, Les hash_fichiers/Messtyles.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2900.3243" name=GENERATOR></HEAD>
<BODY>
<H1>Les hash.</H1>
<H2>La notion de hash.</H2>
<H3>Il s'agit d'un objet semblable à une liste dans lequel chaque élément est 
identifié par une clé spécifique.<BR>Contrairement à une structure indicée 
standard, la clé n'est pas une valeur numérique prédefinie (1,2 ...n) mais une 
valeur définie par l'usager et pouvant être tout type de scalaire.<BR>Le nom 
d'un hash est précédé du signe %, il représente dans ce cas l'ensemble de la 
structure. </H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>%nom_du_hash
  </PRE></DIV></DIV>
<H3>Chacun de ses éléments étant un scalaire sera identifié par le signe $ </H3>
<DIV class=centre style="WIDTH: 20em">
<DIV class=prog><PRE>$nom_du_hash{"valeur_de_la_cle"}
  </PRE></DIV></DIV>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash1.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%h = (a,A,b,B,c,C,d,D);
@cle = (a,b,c,d);
foreach $i (@cle) {
print ("hash($i) = $h{$i}\n");
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl xxx.pl<SPAN class=rouge>ent</SPAN>
hash(a) = A
hash(b) = B
hash(c) = C
hash(d) = D
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H3>Bien noter que dans le cas d'une liste l'indice était représenté entre 
crochets [ ], et que dans le cas d'un hash, la clé se présente entre deux 
acolades { }. </H3>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash2.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash = (a,A,b,B,c,C,d,D);
@indices = (a,b,c,d);
foreach $i (@indices) {
  $hash{$i} = $hash{$i}.$hash{$i};
}
foreach $i (@indices) {
  print "hash($i) = $hash{$i}\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash2.pl<SPAN class=rouge>ent</SPAN>
hash(a) = AA
hash(b) = BB
hash(c) = CC
hash(d) = DD
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H3>L'exemple ci dessus met en evidence deux choses.<BR>Tout d'abord 
l'initialisation d'un hash, une liste dans laquelle tous les éléments de rang 
pair feront office de clés et tous les éléments de rang pair de 
valeurs.<BR>Puis, l'accés à chaque élément, individuellement. </H3>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash3.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash = (a,A,b,B,c,C,d,D);
@liste = %hash;
print "liste = @liste\n";
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash3.pl<SPAN class=rouge>ent</SPAN>
hash = a A b B c C d D
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H3>Si un hash n'est jamais que l'interprétation d'une liste, il est possible 
comme le montre l'exemple de passer sans problème de l'un à l'autre et vice 
versa. 
<H2>Manipulations de hash.</H2>
<H3>Voyons sur des exemples les principales fonctionalités d'un hash. </H3>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash4.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
@liste = (a,A,b,B,c,C,d,D);
%hash = @table;
@indices = (a,b,c,d);
print "Hash initial :\n";
foreach $i (@indices) {
  print "hash($i) = $hash{$i}\n";
  $hash{$i} = $hash{$i}.$hash{$i};
}
print "\nHash modifie :\n";
foreach $i (@indices) {
  print "hash($i) = $hash{$i}\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash4.pl<SPAN class=rouge>ent</SPAN>
Hash initial :
hash(a) = A
hash(b) = B
hash(c) = C
hash(d) = D

Hash modifie :
hash(a) = AA
hash(b) = BB
hash(c) = CC
hash(d) = DD
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H3>Cet exemple met en évidence la création d'un hash à partir d'une liste. 
</H3>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash5.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash1 = (a,A,b,B,c,C,d,D);
%hash2 = %hash;
@indices = (a,b,c,d);
print "Hash1 :\n";
foreach $i (@indices) {
print "hash1($i) = $hash1{$i}\n";
}
print "\Hash2 :\n";
foreach $i (@indices) {
print "hash2($i) = $hash2{$i}\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash5.pl<SPAN class=rouge>ent</SPAN>
Hash1 :
hash1(a) = A
hash1(b) = B
hash1(c) = C
hash1(d) = D

Hash2 :
hash2(a) = A
hash2(b) = B
hash2(c) = C
hash2(d) = D
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H3>Recopie de la totalité d'un hash dans un autre. </H3>
<H2>Opérateurs de hash.</H2>
<H3>L'opérateur keys()<BR>Affecté à un liste standard, il permet de récupérer 
dans la liste en question l'ensemble des clés d'accés à un hash. </H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>@cles = keys(%hash);
  </PRE></DIV></DIV>
<H3>Affecté à un scalaire il permet d'obtenir le nombre d'éléments d'un hash. 
</H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>$taille = keys(%hash);
  </PRE></DIV></DIV>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash6.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash = (a,A,b,B,c,C,d,D);
$nb = keys(%hash);
@cles = keys(%hash);
print "Nombre d'elements : $nb\n";
print "Cles : @cles\n\n";
foreach $i (@cles) {
  print "hash($i) = $hash{$i}\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash6.pl<SPAN class=rouge>ent</SPAN>
Nombre d'elements : 4
Cles : a b c d

hash(a) = {a}
hash(b) = {b}
hash(c) = {c}
hash(d) = {d}
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H3>On dispose ainsi d'un moyen simple pour tester si un hash contient ou non 
des éléments. </H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>#Test du hash.
if (keys(%nom_du_tableau)) {
  # Ici le tableau n'est pas vide.
}else{
  # Ici le tableau est vide
}
  </PRE></DIV></DIV>
<H2>L'opérateur values()</H2>
<H3>Affecté à une liste standard, il permet de récupérer dans la liste en 
question l'ensemble des valeurs d'un hash. </H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>@valeurs = values(%hash);
  </PRE></DIV></DIV>
<H3>Affecté à un scalaire il permet d'obtenir le nombre d'éléments d'un hash. 
</H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>$taille = values(%hash);
  </PRE></DIV></DIV>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash7.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash = (a,A,b,B,c,C,d,D);
$nb = values(%hash);
@valeurs = values(%hash);
print "Nombre d'elements : $nb\n";
print "Valeurs : @valeurs\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash7.pl<SPAN class=rouge>ent</SPAN>
Nombre d'elements : 4
Valeurs : A B C D
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H2>L'opérateur each()</H2>
<H3>Cet opérateur va permettre d'effectuer une itération sur l'ensemble des 
éléments d'un hash sans avoir à procéder à un accés préalable aux clés. </H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>@cles = keys(%table);
foreach (@cles) {
  . . .
}
  </PRE></DIV></DIV>
<H3>Ou plus synthétiquement. </H3>
<DIV class=centre style="WIDTH: 15em">
<DIV class=prog><PRE>foreach (keys(%table)) {
  . . .
}
  </PRE></DIV></DIV>
<H3>L'opérateur each() permet, à chacun de ses appels, de récupérer un doublet 
de scalaires.<BR>Le premier contient la clé.<BR>Le second contient la 
valeur.<BR>Lorsque'il ne reste plus d'éléments, la valeur retournée est 
undef.<BR>Il suffit donc de la tester pour terminer le processus. </H3>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash8.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash = (a,A,b,B,c,C,d,D);
while (($c,$v) = each(%hash)) {
  print "Cle : $c, Valeur : $v\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash8.pl<SPAN class=rouge>ent</SPAN>
Cle : a, Valeur : A
Cle : b, Valeur : B
Cle : c, Valeur : C
Cle : d, Valeur : D
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H2>L'opérateur delete()</H2>
<H3>L'ajout d'un élément dans un hash est simple, il suffit de procéder à 
l'affectation d'une valeur correspondant à une nouvelle clé, le nouveau couplr 
(clé,valeur) est automatiquement créée. </H3>
<DIV class=centre style="WIDTH: 20em">
<DIV class=prog><PRE>$hash($nouvelle_cle) = 3.14159;
  </PRE></DIV></DIV>
<H3>L'effacement d'un élément doit, pour sa part, passer par l'intermédiaire dun 
opérateur spécifique, l'opérateur delete(). </H3>
<DIV class=centre style="WIDTH: 20em">
<DIV class=prog><PRE>delete ($table{"clé"};
  </PRE></DIV></DIV>
<H3>Permet de supprimer l'entré du hash correspondant à la clé dont le nom est 
passée en paramètre. </H3>
<TABLE>
  <TBODY>
  <TR>
    <TH>Programme hash9.pl</TH>
    <TH>Exécution sur l'écran</TH></TR>
  <TR>
    <TD class=source><PRE>#!/usr/bin/perl;
%hash = (a,A,b,B,c,C,d,D);
print "Ajout de l'element e,E.\n";
$hash{"e"} = "E";
while (($c,$v) = each(%table)) {
  print "Cle : $c, Valeur : $v\n";
}
print "\nSuppression de l'element b,B.\n";
delete ($hash{"b"});
while (($c,$v) = each(%table)) {
  print "Cle : $, Valeur : $v\n";
}
    </PRE></TD>
    <TD class=prog><PRE>c:\progs&gt; perl hash9.pl<SPAN class=rouge>ent</SPAN>
Ajout de l'element e,E.
Cle : a, Valeur : A
Cle : b, Valeur : B
Cle : c, Valeur : C
Cle : d, Valeur : D
Cle : e, Valeur : E

Suppression de l'element b,B.
Cle : a, Valeur : A
Cle : c, Valeur : C
Cle : d, Valeur : D
Cle : e, Valeur : E
c:\progs&gt;
    </PRE></TD></TR></TBODY></TABLE>
<H2 style="POSITION: relative; HEIGHT: 5em">
<DIV class=lieng><A 
href="http://www.dil.univ-mrs.fr/~chris/Perl/Structctrl.htm"><IMG 
style="VERTICAL-ALIGN: middle" src="Cours Perl, Les hash_fichiers/prec.gif"> 
</A>Précédent </DIV>
<DIV class=liend>Suivant <A 
href="http://www.dil.univ-mrs.fr/~chris/Perl/Regex.htm"><IMG 
style="VERTICAL-ALIGN: middle" src="Cours Perl, Les hash_fichiers/suiv.gif"> 
</A></DIV></H2></H3></BODY></HTML>
