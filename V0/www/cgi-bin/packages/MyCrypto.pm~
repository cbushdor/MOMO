package packages::MyCrypt;

# +-------------------------------+
# | Dorey Sebastien               |
# | MyCrypt.pm                    |
# | Written     on Oct 13rd 2005  |
# | Last update on Oct 13rd 2005  |
# +-------------------------------+
  
require Exporter;

$VERSION    = '1.0';
$VERSION    = eval $VERSION;
@ISA    = qw( Exporter );
@EXPORT = qw( dates_substracted  are_dates_greater  are_dates_smaller        are_dates_equal 
	      print_res          test_for_smaller   test_for_greater         test_for_equal
	      get_formated_date  is_timer_ok        get_digital_date_format
	      );
@EXPORT_OK = qw( timegm_nocheck timelocal_nocheck );


use packages::MyTime;



# Create a serie of keys in order 
sub create_keys {
    return &transform_date_to_key(get_digital_date_format);
}

# Crypt with an already formated key that is 423
sub jariquez_423_encrypt {
    my ($sentence) = @_;
    my @key = (4,2,3);
    my $key_l = @key;
    my $transform_sentence = ();
    my $l = 0;
    my $i = 0;

    $sentence =~ s/[\ \*]//g;
    chomp($sentence);
    while ($l != length($sentence)) {
	my $p = substr($sentence,$l,1);
	$transform_sentence .= chr(ord($p) + $key[$i] % 128);
	$i++;
	$i = $i % $key_l;
	$l++;
    }    
    return $transform_sentence . "\n";
}


# Crypt with a given key
sub jariquez_givenKey_encrypt {
    my ($sentence,@key) = @_;
    my $key_l = @key;
    my $transform_sentence = ();
    my $l = 0;
    my $i = 0;
    $sentence =~ s/[\ \*]//g;
    chomp($sentence);
    while ($l != length($sentence)) {
	my $p = substr($sentence,$l,1);
	$transform_sentence .= chr(ord($p) + $key[$i] % 128);
	$i++;
	$i = $i % $key_l;
	$l++;
    }    
    return $transform_sentence . "\n";
}

# Decrypt with an already given key that is 423
sub jariquez_423_decrypt {
    my ($sentence) = @_;
    my @key = (4,2,3);
    my $key_l = @key;
    my $transform_sentence = ();
    my $l = 0;
    my $i = 0;

    chomp($sentence);
    while ($l != length($sentence)) {
#	print "--  $l\n";
	my $p = substr($sentence,$l,1);
	$transform_sentence .= chr(ord($p) - $key[$i] % 128);
	$i++;
	$i = $i % $key_l;
	$l++;
    }
    return $transform_sentence . "\n";
}

# Decrypt with an already given key that is 423
sub jariquez_givenKey_decrypt {
    my ($sentence,@key) = @_;
    my $key_l = @key;
    my $transform_sentence = ();
    my $l = 0;
    my $i = 0;
#    my @key = (4,2,3);
    chomp($sentence);
    while ($l != length($sentence)) {
#	print "--  $l\n";
	my $p = substr($sentence,$l,1);
	$transform_sentence .= chr(ord($p) - $key[$i] % 128);
	$i++;
	$i = $i % $key_l;
	$l++;
    }
    return $transform_sentence . "\n";
}

# We transform a given date to an array  to create keys to crypt data
sub transform_date_to_key {
    my ($given_date) = @_;
    chomp($given_date);
    my ($date,$time) = split(/\ /,$given_date);
    my @my_date = split(/\//,$date);
    my @new_date = ($my_date[0],$my_date[1],substr($my_date[2],0,2),substr($my_date[2],2,2));

    @last = (@new_date,split(/\:/,$time));
    $size = @last;
    return ($last[0..($size/2)],$last[(($size/2)+1)..$size]);
}

1;
