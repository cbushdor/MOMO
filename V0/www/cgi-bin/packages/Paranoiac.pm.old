package packages::Paranoiac;

# +-------------------------------+
# | Dorey Sebastien               |
# | MyDaemon.pm                   |
# | Written     on Sept 24th 2005 |
# | Last update on Sept 27th 2005 |
# +-------------------------------+
  
require Exporter;

$VERSION    = '1.0';
$VERSION    = eval $VERSION;
@ISA    = qw( Exporter );
@EXPORT = qw( starts_daemon );
@EXPORT_OK = qw(  );


BEGIN {
    @INC = (@INC,"/usr/local/home/users/dorey_s/www/cgi-bin");
}

use Fcntl qw(:DEFAULT :flock);
use packages::MyTime;

# This starts daemon
sub starts_daemon {
    my ($log_f,$index_log_file) = @_;
    my ($val,
	$loc_time,
	@string_to_print,
	$critical_section,
	$my_date_stamp,
	$laps,
	$line) = ();

    if (-f "$index_log_file") { # We append in index the new log book file names
	sysopen(APPEND_WRITE_INDEX,"$index_log_file",O_WRONLY|O_APPEND) or die("Cannot open $index_log_file $!");
	flock(APPEND_WRITE_INDEX,LOCK_EX);
	print APPEND_WRITE_INDEX "$log_f\n";
	close(APPEND_WRITE_INDEX);
    } else { # We create index that hold log book file name
	sysopen(O_CREATE_WRITE_INDEX,"$index_log_file",O_WRONLY|O_CREAT) or die("Cannot open $index_log_file $!");
	flock(O_CREATE_WRITE_INDEX,LOCK_EX);
	print O_CREATE_WRITE_INDEX "$log_f\n";
	close(O_CREATE_WRITE_INDEX);	
    } # end if
    $my_date_stamp = get_formated_date ;
    chomp($my_date_stamp);
    sysopen(CREATE_WRITE_FILE,"$log_f",O_WRONLY|O_CREAT) or die("Cannot open $index_log_file $!");
    flock(CREATE_WRITE_FILE,LOCK_EX);
    print CREATE_WRITE_FILE "$my_date_stamp\n";
    close(CREATE_WRITE_FILE);
    ($my_date_stamp,$laps) = &reset_laps($my_date_stamp);
    while (1) { # Begin while (1)
	if (is_timer_ok("1 min(s) 42 sec(s)",$laps) == 0) { #  Begin if (is_timer_ok("1 min(s) 42 sec(s)",$laps) == 0)
	    #                                                 We check if timer is under prerequisites
	    @string_to_print = ();
	    sysopen(R,"$log_f",O_RDONLY) || die("$log_f does not exists $!");
	    foreach (<R>) { #  Begin foreach (<R>)
		#             We get the record  of the current log book visited
		chomp($_);
		@string_to_print = (@string_to_print,$_);
		$line = $_;
	    } # End foreach (<R>)
	    close(R);
	    chomp($line);

	    sysopen(W,"$log_f",O_WRONLY) || die("$log_f does not exists $!\n");
	    my $size = @string_to_print;
#	    print W "$size\n";
#	    $size = (($size % 2) == 0) ? $size : ($size+1);
#	    if ($size > 2) { #  Begin if ($size >= 2)
		#              We have more that two lines at least in the file that contains time measured during website visit
		my $local_size = 0;

		foreach (@string_to_print[0..$size]) { #  Begin foreach (@string_to_print[0..(@string_to_print - 1)])
		    #                                      We scan file that contains info of visits
		    $local_size++;
		    if ($local_size != $size) { # Begin if ($local_size != $size)
			print W "$_ 1111\n";
			$line = $_;
		    }  # End if ($local_size != $size)
	#	    else { #  Begin if ($local_size == $size)
			#    That's last line (count down or time that user last on each sections)
		#	$my_date_stamp = get_formated_date;
		#	chomp($my_date_stamp);
			#my $date_subst = (split(/\*/,$line))[2];
			#$laps = dates_substracted($my_date_stamp,$date_subst);
			#chomp($laps);
			#print W "$my_date_stamp*X*$laps\n";
		    #} # End if ($local_size == $size)
		} #  End foreach (@string_to_print[0..(@string_to_print - 1)])
		$my_date_stamp = get_formated_date;
			chomp($my_date_stamp);
			my $date_subst = (split(/\*/,$line))[2];
			$laps = dates_substracted($my_date_stamp,$date_subst);
			chomp($laps);
			print W "$my_date_stamp*X*$laps\n";
	
#	    }  # End if ($size >= 2)
#	    else { #  Begin if (!($size >= 2))
		#    Case that's the first page
#		print W "$string_to_print[0]...\n";
#		$line = $string_to_print[0];
#		my $date_subst = (split(/\*/,$line))[2];
#		$my_date_stamp = get_formated_date ;
#		chomp($my_date_stamp);
#		$laps = dates_substracted($my_date_stamp,$line);
#		chomp($laps);
#		print W "$my_date_stamp*X*$laps\n";		    
#	    }  # End if (!($size >= 2))
	    close(W);
	    sleep(1); # One sec stop
	} #  End if (is_timer_ok("1 min(s) 42 sec(s)",$laps) == 0)
	else { # Begin if (is_timer_ok("1 min(s) 42 sec(s)",$laps) != 0)
	    print "end 1\n";
	    exit(-1);
	} # End if (is_timer_ok("1 min(s) 42 sec(s)",$laps) != 0)
    } # End while (1)
}

sub reset_laps {
    my ($my_date_stamp) = @_;
    my $line = ();

    $line = &init_date;
    $laps = dates_substracted($line,$my_date_stamp);
    chomp($laps);
    return ($line,$laps);
}

sub init_date {
    my $line = ();

    $line = get_formated_date;
    chomp($line);
    return $line;
}

1;
