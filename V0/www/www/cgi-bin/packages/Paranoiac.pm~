package packages::Paranoiac;

# +-------------------------------+
# | Dorey Sebastien               |
# | MyDaemon.pm                   |
# | Written     on Sept 24th 2005 |
# | Last update on Sept 27th 2005 |
# +-------------------------------+
  
require Exporter;

$VERSION    = '1.0';
$VERSION    = eval $VERSION;
@ISA    = qw( Exporter );
@EXPORT = qw( starts_daemon );
@EXPORT_OK = qw(  );


BEGIN {
    @INC = (@INC,"/usr/local/home/users/dorey_s/www/cgi-bin");
}

use Fcntl qw(:DEFAULT :flock);
use packages::MyTime;

# This starts daemon
sub starts_daemon {
    my ($log_f,$index_log_file) = @_;
    my ($val,
	$loc_time,
	@string_to_print,
	$critical_section,
	$my_date_stamp,
	$laps,
	$line) = ();
    if (-f "$index_log_file") { # We append in index the new log book file names
	sysopen(APPEND_WRITE_INDEX,"$index_log_file",O_WRONLY|O_APPEND) or die("Cannot open $index_log_file $!");
	flock(APPEND_WRITE_INDEX,LOCK_EX);
	print APPEND_WRITE_INDEX "$log_f\n";
	close(APPEND_WRITE_INDEX);
    } else { # We create index that hold log book file name
	sysopen(O_CREATE_WRITE_INDEX,"$index_log_file",O_WRONLY|O_CREAT) or die("Cannot open $index_log_file $!");
	flock(O_CREATE_WRITE_INDEX,LOCK_EX);
	print O_CREATE_WRITE_INDEX "$log_f\n";
	close(O_CREATE_WRITE_INDEX);	
    } # end if
    $my_date_stamp = get_formated_date ;
    chomp($my_date_stamp);
    sysopen(CREATE_WRITE_FILE,"$log_f",O_WRONLY|O_CREAT) or die("Cannot open $index_log_file $!");
    flock(CREATE_WRITE_FILE,LOCK_EX);
    print CREATE_WRITE_FILE "$my_date_stamp\n";
    close(CREATE_WRITE_FILE);
    ($my_date_stamp,$laps) = &reset_laps($my_date_stamp);
    while (1) { # Begin while (1)
	if (is_timer_ok("1 min(s) 42 sec(s)",$laps) == 0) { #  Begin if (is_timer_ok("1 min(s) 42 sec(s)",$laps) == 0)
	    #                                                 We check if timer is under prerequisites
	    @string_to_print = ();
	    my $size = 0;
	    sysopen(R,"$log_f",O_RDONLY) || die("$log_f does not exists $!");
	    foreach (<R>) { #  Begin foreach (<R>)
		#             We get the record  of the current log book visited
		chomp($_);
		@string_to_print = (@string_to_print,$_);
		$line = $_;
		$size++;
	    } # End foreach (<R>)
	    close(R);
	    chomp($line);

	    if ($size > 2) { #  Begin if ($size >= 2)
		#              We have more that two lines at least in the file that contains time measured during website visit
		my $local_size = 0;
		&insert_info_when_lines($log_f,@string_to_print) ;
	    }  # End if ($size >= 2)
	    else { #  Begin if (!($size >= 2))
		#    Case that's the first page
		sysopen(W,"$log_f",O_WRONLY) || die("$log_f does not exists $!\n");
		print W "$string_to_print[0]\n";
		$line = $string_to_print[0];
		$my_date_stamp = get_formated_date ;
		chomp($my_date_stamp);
		$laps = dates_substracted($my_date_stamp,$line);
		chomp($laps);
		print W "$my_date_stamp*X*$laps\n";		    
		close(W);
	    }  #  End if (!($size >= 2))
	    sleep(1); # One sec stop
	} #  End if (is_timer_ok("1 min(s) 42 sec(s)",$laps) == 0)
	else { # Begin if (is_timer_ok("1 min(s) 42 sec(s)",$laps) != 0)
	    print "end 1\n";
	    exit(-1);
	} # End if (is_timer_ok("1 min(s) 42 sec(s)",$laps) != 0)
    } # End while (1)
}

# reset laps to current date
sub reset_laps {
    my ($my_date_stamp) = @_;
    my $line = ();

    $line = &init_date;
    $laps = dates_substracted($line,$my_date_stamp);
    chomp($laps);
    return ($line,$laps);
}

# initialise a date
sub init_date {
    my $line = ();

    $line = get_formated_date;
    chomp($line);
    return $line;
}

# insert new info when a log file zlready exists (at least 2 lines)
sub insert_info_when_lines {
    my ($log_f,@string_to_print) = @_;
    my $line = @string_to_print;

    $line = $string_to_print[$line-1];
    chomp($line);
    my $my_date_stamp = get_formated_date;
    my $date_subst = (split(/\*/,$line))[2];    
    chomp($my_date_stamp);
    my $laps = dates_substracted($my_date_stamp,$date_subst);
    chomp($laps);
    @string_to_print = (@string_to_print,"--$my_date_stamp*X*$laps\n");

    sysopen(WRF,"$log_f",O_CREAT|O_WRONLY) || die("$log_f does not exists $!\n");
    foreach (@string_to_print) { #  Begin foreach (@string_to_print[0..(@string_to_print - 1)])
	#                          We scan file that contains info of visits
	print WRF "$_";
	$line = $_;
    } #  End foreach (@string_to_print[0..(@string_to_print - 1)])
    close(WRF);
}

1;


